JDBC Statements :

 An interface java.sql.Statement represents such statements in the JDBC API.

At first, we need to establish a connection with the database in order to execute statements from our application. Then we should create a Statement object using a Connection object. More precisely, we need to call the createStatement() method of the Connection that creates a Statement.

Once the Statement object is created, we can execute SQL statements by calling its execution methods. The most generic method is execute(String sql). It performs a given SQL statement and returns true if there is a return data, otherwise, the method returns false. For example, for the SELECT statement it returns true and for the INSERT statement false.


However, the Statement interface has other more specific execution methods. One of them is executeUpdate(String sql). Unlike the execute the executeUpdate method returns the number of rows affected by the SQL statement.


Use executeUpdate method for INSERT, DELETE and UPDATE statements or for statements that return nothing, such as CREATE or DROP.

Example :

public class Westeros {
    public static void main(String[] args) {
        String url = "jdbc:sqlite:C:/sqlite/westeros.db";

        SQLiteDataSource dataSource = new SQLiteDataSource();
        dataSource.setUrl(url);

        try (Connection con = dataSource.getConnection()) {
            // Statement creation
            try (Statement statement = con.createStatement()) {
                // Statement execution
                statement.executeUpdate("CREATE TABLE IF NOT EXISTS HOUSES(" +
                        "id INTEGER PRIMARY KEY," +
                        "name TEXT NOT NULL," +
                        "words TEXT NOT NULL)");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


int i = statement.executeUpdate("INSERT INTO HOUSES VALUES " +
        "(1, 'Targaryen of King''s Landing', 'Fire and Blood')," +
        "(2, 'Stark of Winterfell', 'Summer is Coming')," +
        "(3, 'Lannister of Casterly Rock', 'Hear Me Roar!')");


Note, executeUpdate method requires to wrap text values into a single quote character ('). If the value contains this character, you have to replace it with double single quotes ('') to be parsed correctly.

Processing ResultSet

For processing ResultSet, we can use its next() method. Each call of the next() moves a pointer to the record forward one position, starting from the first record. For retrieving column values we will use ResultSet getter methods of the appropriate type. For example, for the column with a TEXT type and INTEGER type, we can use getString and getInt methods respectively. ResultSet getters can accept two types of arguments: column index (starting from 1) and column label.

Example :

try (ResultSet greatHouses = statement.executeQuery("SELECT * FROM HOUSES")) {
    while (greatHouses.next()) {
        // Retrieve column values
        int id = greatHouses.getInt("id");
        String name = greatHouses.getString("name");
        String words = greatHouses.getString("words");

        System.out.printf("House %d%n", id);
        System.out.printf("\tName: %s%n", name);
        System.out.printf("\tWords: %s%n", words);
    }
}

Conclusion

To sum up, we can use the Statement JDBC interface for the execution of SQL statements. There are 3 methods that can execute statements:
* execute(String sql) the most generic method
* executeUpdate(String sql) that we should use for execution INSERT, UPDATE and DELETE statements and statements that return nothing
* executeQuery(String sql) method that is recommended to use with a SELECT statement. The return type of executeQuery method is a ResultSet object that represents a table of records returned by the executed statement.

