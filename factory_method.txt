Factory Method and Prototype :

The main goals of creational design patterns are making more reusable code and defining separate object creation methods.

The factory method is a creational design pattern that describes how you can, through interface or abstract class, make a method to create objects which could be overridden in subclasses. It's one of the basic patterns that describe how to solve recurring design problems to write more flexible and reusable code.

When can we apply the factory method?

There are a few situations where you can use this pattern:

1. It's useful when you don't know the exact types of objects your code should work with. If your application has to expand the types of objects it works with, it will be easier with the factory method. You will only need to create a new factory subclass that will override the factory method in it.
2. A lot of frameworks and libraries are made with the factory method in mind, which allows you to modify them in your code. So if you are writing a framework that in your plans will be used by other people, you could apply the factory method making the extensions of your code possible.
3. This pattern could also be used when you want to save system resources by reusing existing objects instead of rebuilding new ones each time.

Prototype :

A prototype is a creational design pattern that is based on the concept of copying an existing object to create a new one. This pattern delegates the copying process to the object that is being copied. It commonly uses an interface that contains the clone() method. Let's return to our bird creation example.

When can you apply the prototype?
You can use this pattern in two situations:
1. When your code shouldn't depend on a class that creates prototype objects. This can occur when you are working with objects which were passed to you from a 3rd-party code via some interface. In this case, you simply can't rely on them, because these classes are unknown. Prototype pattern allows working around these classes by providing an interface that works with any object that supports the copying process.
2. When you want to reduce the number of subclasses that only differ by how they initialize objects. The pattern lets you use a set of pre-built objects, configured in various ways, as prototypes.
