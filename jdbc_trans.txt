JDBC Transactions :

Now we can create a Connection object called con and execute con.setAutoCommit(false) method to disable auto-committing so that we will create both an invoice and an order in the case of successful execution or none of them in the case of failure:


public class StoreDB {

    public static void main(String[] args) {
        String url = "jdbc:sqlite:path-to-store.db";

        SQLiteDataSource dataSource = new SQLiteDataSource();
        dataSource.setUrl(url);

        String insertInvoiceSQL = "INSERT INTO \"invoice\" " +
                "(id, shipping_address, total_cost) VALUES (?, ?, ?)";

        String insertOrderSQL = "INSERT INTO \"order\" " +
                "(id, invoice_id, product_name) VALUES (?, ?, ?)";

        try (Connection con = dataSource.getConnection()) {

            // Disable auto-commit mode
            con.setAutoCommit(false);

            try (PreparedStatement insertInvoice = con.prepareStatement(insertInvoiceSQL);
                 PreparedStatement insertOrder = con.prepareStatement(insertOrderSQL)) {

                // Insert an invoice
                int invoiceId = 1;
                insertInvoice.setInt(1, invoiceId);
                insertInvoice.setString(2, "Dearborn, Michigan");
                insertInvoice.setInt(3, 100500);
                insertInvoice.executeUpdate();

                // Insert an order
                int orderId = 1;
                insertOrder.setInt(1, orderId);
                insertOrder.setInt(2, invoiceId);
                insertOrder.setString(3, "Ford Model A");
                insertOrder.executeUpdate();

                con.commit();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


Rollback:


catch (SQLException e) {
    if (con != null) {
        try {
          System.err.print("Transaction is being rolled back");
          con.rollback();
        } catch (SQLException excep) {
          excep.printStackTrace();
        }
    }
}


Savepoint:

As we have mentioned earlier, there are two ways to end the transaction: using the commit method that saves all transaction changes or using the rollback method that discards them. In most cases, this is exactly what we need. However, sometimes we have to save some changes and discard others. For that, we have to create a savepoint in the code. All changes introduced up to the savepoint will be saved and can be committed later.

To create a savepoint in JDBC, we can call the setSavepoint method of the Connection object that returns a Savepoint object. We can roll back the transaction to the savepoint so that all changes made before the savepoint will be preserved, and all changes after the savepoint will be discarded. To rollback the transaction to the specified savepoint, we can use the rollback(Savepoint savepoint) method that accepts a Savepoint object. To make it more concrete, let's consider the following example:


String insertInvoiceSQL = "INSERT INTO \"invoice\" " +
        "(id, shipping_address, total_cost) VALUES (?, ?, ?)";

String selectAddressSQL = "SELECT shipping_address " +
        "FROM \"invoice\" WHERE id = ?";

try (Connection con = dataSource.getConnection()) {

    // Disable auto-commit mode
    con.setAutoCommit(false);

    try (PreparedStatement insertInvoice = con.prepareStatement(insertInvoiceSQL)) {

        // Create a savepoint
        Savepoint savepoint = con.setSavepoint();

        // Insert an invoice
        int invoiceId = 1;
        insertInvoice.setInt(1, invoiceId);
        insertInvoice.setString(2, "Dearborn, Michigan");
        insertInvoice.setInt(3, 100500);
        insertInvoice.executeUpdate();

        PreparedStatement selectAddress = con.prepareStatement(selectAddressSQL);
        selectAddress.setInt(1, invoiceId);
        ResultSet resultSet = selectAddress.executeQuery();

        if (resultSet.getString(1).equals("Dearborn, Michigan")) {
            con.rollback(savepoint);
        }

        con.commit();
    }
} catch (SQLException e) {
    e.printStackTrace();
}

In the code above, we create a Savepoint object called savepoint and rollback the transaction changes to the savepoint if the invoice with id equals 1 has shipping address equals "Dearborn, Michigan".
It is possible to release a savepoint, or in other words, to remove it from the current transaction. One way to release a savepoint is by using the Connection.releaseSavepoint method that takes a Savepoint object as a parameter. Any savepoint that has been created in a transaction is automatically released and becomes invalid when the transaction is committed or when the entire transaction is rolled back.

Rolling a transaction back to a savepoint automatically releases and makes invalid any other savepoints created after the savepoint that was rolled back. If a savepoint has been released, attempting to reference it in a rollback operation throws an SQLException.

