Singleton :

Sometimes we need to have only a single instance of a class shared across an entire application. There is a special design pattern called Singleton that restricts the instantiation of a class to one object.
For example, a class that keeps the connection to the database can be written as a singleton: creating a connection object time after time will be quite bulky in terms of memory. If it is a singleton, then your application will work better and faster.

Basic singleton in Java
The standard way to write a class according to the singleton pattern includes:
* a private constructor to defeat the creation of instances using the keyword new;
* a private static variable of the class that is the only instance of the class;
* a public static method to return the same instance of the class; this is a global access point to the instance.

Example :

The following code implements these concepts:

class Singleton {

    private static final Singleton INSTANCE = new Singleton();

    private Singleton() { }

    public static Singleton getInstance() {
        return INSTANCE;
    }
}

Singleton s1 = Singleton.getInstance();
Singleton s2 = Singleton.getInstance();
Singleton s3 = Singleton.getInstance();
        
System.out.println(s1 == s2); // true because s1 and s2 refer the same object
System.out.println(s2 == s3); // true because s2 and s3 refer the same object

Lazy initialization
The singleton above loads the instance when the class is loaded. But sometimes the initialization of a singleton can take much time: for example, to load the values of the fields from a file or a database.
The following implementation loads the instance only if it is needed by a client (who calls getInstance):
class Singleton {
    
    private static Singleton instance;
    
    private Singleton () { }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

Singleton pattern in Java libraries
There are a lot of Singleton examples in the Java Class Library:
* java.lang.Runtime.getRuntime()
* java.awt.Desktop.getDesktop()
* java.lang.System.getSecurityManager()
